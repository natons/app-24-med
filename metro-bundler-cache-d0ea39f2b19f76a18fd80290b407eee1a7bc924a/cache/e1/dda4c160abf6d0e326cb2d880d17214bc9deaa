Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = '/home/natanael/Documentos/JOB/APPS_REACT/app_med/tabs/CreateScreen.js';

var _reactNative = require('react-native');

var _Toolbar = require('../lib/Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _helpers = require('../lib/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    CreateScreen: {
        displayName: 'CreateScreen'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/home/natanael/Documentos/JOB/APPS_REACT/app_med/tabs/CreateScreen.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var CreateScreen = _wrapComponent('CreateScreen')((_temp = _class = function (_React$Component) {
    _inherits(CreateScreen, _React$Component);

    function CreateScreen() {
        _classCallCheck(this, CreateScreen);

        return _possibleConstructorReturn(this, (CreateScreen.__proto__ || Object.getPrototypeOf(CreateScreen)).apply(this, arguments));
    }

    _createClass(CreateScreen, [{
        key: 'render',
        value: function render() {
            return _react3.default.createElement(
                _reactNative.View,
                { style: {
                        flex: 1,
                        marginTop: _reactNative.Platform.OS == 'ios' ? 0 : 24
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 19
                    }
                },
                _react3.default.createElement(_Toolbar2.default, { title: 'Criar', color: (0, _helpers.getColor)("#ff5252"), __source: {
                        fileName: _jsxFileName,
                        lineNumber: 25
                    }
                }),
                _react3.default.createElement(
                    _reactNative.Text,
                    { style: { fontSize: 30 }, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 26
                        }
                    },
                    'Create'
                )
            );
        }
    }]);

    return CreateScreen;
}(_react3.default.Component), _class.navigationOptions = {
    tabBarLabel: 'Create',
    tabBarIcon: function tabBarIcon(_ref) {
        var tintColor = _ref.tintColor;
        return _react3.default.createElement(_reactNative.Image, {
            source: require('../images/create_icon.png'),
            style: { width: 24, height: 24, tintColor: 'white' }, __source: {
                fileName: _jsxFileName,
                lineNumber: 10
            }
        });
    }
}, _temp));

exports.default = CreateScreen;